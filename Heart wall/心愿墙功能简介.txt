目的——>变为需求——>实现需求——>引导遵循
做心愿墙的目的是提高顾客的粘性，
	现在的商家非常多，只是商品好，也不一定有很多的顾客，所以提高顾客的粘性（依赖程度），成为了各行各业，都在苦心
	钻研的一个热门需求;
	原理：如果让顾客记住你的商店，就是要用“事件”把顾客和商店联系在一起，作为一家蛋糕店
	（如果制造很多事件去串联每一个顾客显然是得不偿失的）怎样通过一个“事件”让大多数顾客顾客对
	自己的店提高粘性呢？首先就是让他走心！！！（蛋糕和许愿本来就很接近）
那该怎么办呢？
	来来来许个愿吧！！！ 哈哈哈（就是做件走心的事）
为什么你让我许愿我就许愿啊？
	答：许个真心愿望，本店所有蛋糕   9折   优惠！！！（如果愿望实现了，还有更多礼物等着您）hehehe
	
1、全屏背景图轮播功能（插件）当时换了好多图片都不合适；
2、双击删除心愿卡功能（略）
	（添加数据删除）当双击卡片头部时去获取，该卡片对应的父元素将他删除；
		同时去 数组 中根据id找到该条 数据 进行删除
3、心愿卡随机位置功能（略）（新生成的心愿卡也有老事件）
4、添加心愿和取消添加 （实现按钮重用）
（一键多用）（togll）在这不好用用的是文本获取  if（）html（）
5、添加心愿功能
	5.1、普通心愿添加
   	5.2、保密心愿添加
6、不输入密码的 X 和是否保密的两个按钮进行连锁（点一次选中，点第二次取消选中、、、、）
7、解决不填入实现时间出现undefined的 bg ；（不会有倒计时）
8、点击‘许愿’按钮在页面创建许愿卡并清空左侧许愿卡上的所有内容
9、点击‘许愿’按钮判断，是否许愿了如果没有许愿会弹出提示信息（心愿不能为空如果为空弹框提示，否则达不到提高顾客粘性的要求）
10、点击‘许愿’按钮判断，添加的实现时间是否正确，不正确弹出提示信息	
	(用的是获取时间的毫秒值和当前时间做比较)
12、自动添加创建时间功能（为真实的创建时间）
11、点击‘许愿’如实现时间正确，自动添加倒计时效果；（保密心愿不显示倒计时）出bg最多  
	（在数据里面有一个实现时间的毫秒值把这个毫秒值和当前时间相减，然后再格式化这个差值 返回到页面上）
	（现象是：当删除有定时器的元素时定时器会跑到没有定时器的页面上去）  
13、心愿卡拖拽功能（用mouseenter，mousemove，和事件对象event，当鼠标在心愿卡内左键按下并移动时
	获取鼠标距离页面的左侧和顶部的距离，赋值给卡片即可）
14、鼠标进入放大镜图标：输入框动态展开并自动获取焦点；mouseenter animate focus
15、在输入完成后单机鼠标进行搜索；（鼠标移出图标输入框动态还原）click   val()  $.each()	
16、实现心愿搜索功能；（把搜索到的心愿卡 用动画的形式 提高层级并定位到指定位置）通过name属性进行查找
	找到之后对元素进行祖代查找最后用animate动画完成动态操作！
17、保密心愿上锁并添加心愿锁图片
		先定义一个类名主要为了添加背景图片 创建心愿卡时进行判断如果是保密心愿就添加这个类名；反之不添加
		（出大bg 第二次关闭保密心愿时心愿锁图片不显示）
		原因是重新添加被删除的元素时判断有误n:y
18、添加保密心愿输入密码时弹出遮罩层并限制页面滚动（外加全屏隐藏滚动条）   
		密码输入完成点确定按钮回复页面所有被限制的功能；动态的给HTML加style=“overflow: hidden;”
		 还原滚动效果 $('html').css('overflow','auto');
19、点击  “输入密码文字”可以让 输入框 获取焦点、输入框隐藏输入内容  并在输入框上面闪现输入内容加以校验；
		用setTimeout定时删除 闪现标签<span> 里面的内容 用css方法每次输入改变<span>标签的位置
20、查看保密心愿功能（要密码验证）如果密码输入错误弹出提示信息
		（密码验证用的是数组和对象组合 根据输入的键名（密码）去查找键值，再根据键值去数组
		查找数组中的数据对象）
21、密码输入正确后以非保密心愿 的形式展现  并删除保密心愿卡，
		密码验证通过后 先存储一个备份以下 在删除有心愿锁的心愿卡，调出对应的保密信息创建非保密心愿卡
22、当保密心愿正常展现关闭后  还原为保密心愿展示；
		（等关闭正常展现后 把备份的信息拿出来去创建新的保密心愿）（以上全部功能均有数据联动）
